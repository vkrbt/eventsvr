/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2017-12-27")
public class Stream implements org.apache.thrift.TBase<Stream, Stream._Fields>, java.io.Serializable, Cloneable, Comparable<Stream> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Stream");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField THUMBNAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("thumbnail", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STREAMER_FIELD_DESC = new org.apache.thrift.protocol.TField("streamer", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STREAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("streamType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField VIEWERS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("viewersCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StreamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StreamTupleSchemeFactory();

  public java.lang.String id; // required
  public java.lang.String name; // required
  public java.lang.String thumbnail; // required
  public java.lang.String streamer; // required
  public STREAM_TYPE streamType; // required
  public long viewersCount; // required
  public java.lang.String description; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    THUMBNAIL((short)3, "thumbnail"),
    STREAMER((short)4, "streamer"),
    STREAM_TYPE((short)5, "streamType"),
    VIEWERS_COUNT((short)6, "viewersCount"),
    DESCRIPTION((short)7, "description");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // THUMBNAIL
          return THUMBNAIL;
        case 4: // STREAMER
          return STREAMER;
        case 5: // STREAM_TYPE
          return STREAM_TYPE;
        case 6: // VIEWERS_COUNT
          return VIEWERS_COUNT;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VIEWERSCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THUMBNAIL, new org.apache.thrift.meta_data.FieldMetaData("thumbnail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREAMER, new org.apache.thrift.meta_data.FieldMetaData("streamer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("streamType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "STREAM_TYPE")));
    tmpMap.put(_Fields.VIEWERS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("viewersCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Stream.class, metaDataMap);
  }

  public Stream() {
  }

  public Stream(
    java.lang.String id,
    java.lang.String name,
    java.lang.String thumbnail,
    java.lang.String streamer,
    STREAM_TYPE streamType,
    long viewersCount,
    java.lang.String description)
  {
    this();
    this.id = id;
    this.name = name;
    this.thumbnail = thumbnail;
    this.streamer = streamer;
    this.streamType = streamType;
    this.viewersCount = viewersCount;
    setViewersCountIsSet(true);
    this.description = description;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Stream(Stream other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetThumbnail()) {
      this.thumbnail = other.thumbnail;
    }
    if (other.isSetStreamer()) {
      this.streamer = other.streamer;
    }
    if (other.isSetStreamType()) {
      this.streamType = other.streamType;
    }
    this.viewersCount = other.viewersCount;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
  }

  public Stream deepCopy() {
    return new Stream(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.thumbnail = null;
    this.streamer = null;
    this.streamType = null;
    setViewersCountIsSet(false);
    this.viewersCount = 0;
    this.description = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public Stream setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public Stream setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getThumbnail() {
    return this.thumbnail;
  }

  public Stream setThumbnail(java.lang.String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  public void unsetThumbnail() {
    this.thumbnail = null;
  }

  /** Returns true if field thumbnail is set (has been assigned a value) and false otherwise */
  public boolean isSetThumbnail() {
    return this.thumbnail != null;
  }

  public void setThumbnailIsSet(boolean value) {
    if (!value) {
      this.thumbnail = null;
    }
  }

  public java.lang.String getStreamer() {
    return this.streamer;
  }

  public Stream setStreamer(java.lang.String streamer) {
    this.streamer = streamer;
    return this;
  }

  public void unsetStreamer() {
    this.streamer = null;
  }

  /** Returns true if field streamer is set (has been assigned a value) and false otherwise */
  public boolean isSetStreamer() {
    return this.streamer != null;
  }

  public void setStreamerIsSet(boolean value) {
    if (!value) {
      this.streamer = null;
    }
  }

  public STREAM_TYPE getStreamType() {
    return this.streamType;
  }

  public Stream setStreamType(STREAM_TYPE streamType) {
    this.streamType = streamType;
    return this;
  }

  public void unsetStreamType() {
    this.streamType = null;
  }

  /** Returns true if field streamType is set (has been assigned a value) and false otherwise */
  public boolean isSetStreamType() {
    return this.streamType != null;
  }

  public void setStreamTypeIsSet(boolean value) {
    if (!value) {
      this.streamType = null;
    }
  }

  public long getViewersCount() {
    return this.viewersCount;
  }

  public Stream setViewersCount(long viewersCount) {
    this.viewersCount = viewersCount;
    setViewersCountIsSet(true);
    return this;
  }

  public void unsetViewersCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEWERSCOUNT_ISSET_ID);
  }

  /** Returns true if field viewersCount is set (has been assigned a value) and false otherwise */
  public boolean isSetViewersCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEWERSCOUNT_ISSET_ID);
  }

  public void setViewersCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEWERSCOUNT_ISSET_ID, value);
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public Stream setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case THUMBNAIL:
      if (value == null) {
        unsetThumbnail();
      } else {
        setThumbnail((java.lang.String)value);
      }
      break;

    case STREAMER:
      if (value == null) {
        unsetStreamer();
      } else {
        setStreamer((java.lang.String)value);
      }
      break;

    case STREAM_TYPE:
      if (value == null) {
        unsetStreamType();
      } else {
        setStreamType((STREAM_TYPE)value);
      }
      break;

    case VIEWERS_COUNT:
      if (value == null) {
        unsetViewersCount();
      } else {
        setViewersCount((java.lang.Long)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case THUMBNAIL:
      return getThumbnail();

    case STREAMER:
      return getStreamer();

    case STREAM_TYPE:
      return getStreamType();

    case VIEWERS_COUNT:
      return getViewersCount();

    case DESCRIPTION:
      return getDescription();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case THUMBNAIL:
      return isSetThumbnail();
    case STREAMER:
      return isSetStreamer();
    case STREAM_TYPE:
      return isSetStreamType();
    case VIEWERS_COUNT:
      return isSetViewersCount();
    case DESCRIPTION:
      return isSetDescription();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Stream)
      return this.equals((Stream)that);
    return false;
  }

  public boolean equals(Stream that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_thumbnail = true && this.isSetThumbnail();
    boolean that_present_thumbnail = true && that.isSetThumbnail();
    if (this_present_thumbnail || that_present_thumbnail) {
      if (!(this_present_thumbnail && that_present_thumbnail))
        return false;
      if (!this.thumbnail.equals(that.thumbnail))
        return false;
    }

    boolean this_present_streamer = true && this.isSetStreamer();
    boolean that_present_streamer = true && that.isSetStreamer();
    if (this_present_streamer || that_present_streamer) {
      if (!(this_present_streamer && that_present_streamer))
        return false;
      if (!this.streamer.equals(that.streamer))
        return false;
    }

    boolean this_present_streamType = true && this.isSetStreamType();
    boolean that_present_streamType = true && that.isSetStreamType();
    if (this_present_streamType || that_present_streamType) {
      if (!(this_present_streamType && that_present_streamType))
        return false;
      if (!this.streamType.equals(that.streamType))
        return false;
    }

    boolean this_present_viewersCount = true;
    boolean that_present_viewersCount = true;
    if (this_present_viewersCount || that_present_viewersCount) {
      if (!(this_present_viewersCount && that_present_viewersCount))
        return false;
      if (this.viewersCount != that.viewersCount)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetThumbnail()) ? 131071 : 524287);
    if (isSetThumbnail())
      hashCode = hashCode * 8191 + thumbnail.hashCode();

    hashCode = hashCode * 8191 + ((isSetStreamer()) ? 131071 : 524287);
    if (isSetStreamer())
      hashCode = hashCode * 8191 + streamer.hashCode();

    hashCode = hashCode * 8191 + ((isSetStreamType()) ? 131071 : 524287);
    if (isSetStreamType())
      hashCode = hashCode * 8191 + streamType.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(viewersCount);

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Stream other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThumbnail()).compareTo(other.isSetThumbnail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThumbnail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thumbnail, other.thumbnail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStreamer()).compareTo(other.isSetStreamer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreamer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamer, other.streamer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStreamType()).compareTo(other.isSetStreamType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreamType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamType, other.streamType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewersCount()).compareTo(other.isSetViewersCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewersCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewersCount, other.viewersCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Stream(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thumbnail:");
    if (this.thumbnail == null) {
      sb.append("null");
    } else {
      sb.append(this.thumbnail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("streamer:");
    if (this.streamer == null) {
      sb.append("null");
    } else {
      sb.append(this.streamer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("streamType:");
    if (this.streamType == null) {
      sb.append("null");
    } else {
      sb.append(this.streamType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewersCount:");
    sb.append(this.viewersCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StreamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StreamStandardScheme getScheme() {
      return new StreamStandardScheme();
    }
  }

  private static class StreamStandardScheme extends org.apache.thrift.scheme.StandardScheme<Stream> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Stream struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // THUMBNAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thumbnail = iprot.readString();
              struct.setThumbnailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STREAMER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.streamer = iprot.readString();
              struct.setStreamerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STREAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.streamType = STREAM_TYPE.findByValue(iprot.readI32());
              struct.setStreamTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VIEWERS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.viewersCount = iprot.readI64();
              struct.setViewersCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Stream struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.thumbnail != null) {
        oprot.writeFieldBegin(THUMBNAIL_FIELD_DESC);
        oprot.writeString(struct.thumbnail);
        oprot.writeFieldEnd();
      }
      if (struct.streamer != null) {
        oprot.writeFieldBegin(STREAMER_FIELD_DESC);
        oprot.writeString(struct.streamer);
        oprot.writeFieldEnd();
      }
      if (struct.streamType != null) {
        oprot.writeFieldBegin(STREAM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.streamType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIEWERS_COUNT_FIELD_DESC);
      oprot.writeI64(struct.viewersCount);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StreamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StreamTupleScheme getScheme() {
      return new StreamTupleScheme();
    }
  }

  private static class StreamTupleScheme extends org.apache.thrift.scheme.TupleScheme<Stream> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Stream struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetThumbnail()) {
        optionals.set(2);
      }
      if (struct.isSetStreamer()) {
        optionals.set(3);
      }
      if (struct.isSetStreamType()) {
        optionals.set(4);
      }
      if (struct.isSetViewersCount()) {
        optionals.set(5);
      }
      if (struct.isSetDescription()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetThumbnail()) {
        oprot.writeString(struct.thumbnail);
      }
      if (struct.isSetStreamer()) {
        oprot.writeString(struct.streamer);
      }
      if (struct.isSetStreamType()) {
        oprot.writeI32(struct.streamType.getValue());
      }
      if (struct.isSetViewersCount()) {
        oprot.writeI64(struct.viewersCount);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Stream struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.thumbnail = iprot.readString();
        struct.setThumbnailIsSet(true);
      }
      if (incoming.get(3)) {
        struct.streamer = iprot.readString();
        struct.setStreamerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.streamType = STREAM_TYPE.findByValue(iprot.readI32());
        struct.setStreamTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.viewersCount = iprot.readI64();
        struct.setViewersCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

