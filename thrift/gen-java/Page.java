/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2017-12-27")
public class Page implements org.apache.thrift.TBase<Page, Page._Fields>, java.io.Serializable, Cloneable, Comparable<Page> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Page");

  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_FIELD_DESC = new org.apache.thrift.protocol.TField("last", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_ELEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalElements", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPages", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_ELEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfElements", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PageTupleSchemeFactory();

  public java.util.List<Stream> content; // required
  public boolean last; // required
  public int totalElements; // required
  public int totalPages; // required
  public int numberOfElements; // required
  public boolean first; // required
  public int size; // required
  public int number; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTENT((short)1, "content"),
    LAST((short)2, "last"),
    TOTAL_ELEMENTS((short)3, "totalElements"),
    TOTAL_PAGES((short)4, "totalPages"),
    NUMBER_OF_ELEMENTS((short)5, "numberOfElements"),
    FIRST((short)7, "first"),
    SIZE((short)8, "size"),
    NUMBER((short)9, "number");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTENT
          return CONTENT;
        case 2: // LAST
          return LAST;
        case 3: // TOTAL_ELEMENTS
          return TOTAL_ELEMENTS;
        case 4: // TOTAL_PAGES
          return TOTAL_PAGES;
        case 5: // NUMBER_OF_ELEMENTS
          return NUMBER_OF_ELEMENTS;
        case 7: // FIRST
          return FIRST;
        case 8: // SIZE
          return SIZE;
        case 9: // NUMBER
          return NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LAST_ISSET_ID = 0;
  private static final int __TOTALELEMENTS_ISSET_ID = 1;
  private static final int __TOTALPAGES_ISSET_ID = 2;
  private static final int __NUMBEROFELEMENTS_ISSET_ID = 3;
  private static final int __FIRST_ISSET_ID = 4;
  private static final int __SIZE_ISSET_ID = 5;
  private static final int __NUMBER_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Stream"))));
    tmpMap.put(_Fields.LAST, new org.apache.thrift.meta_data.FieldMetaData("last", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOTAL_ELEMENTS, new org.apache.thrift.meta_data.FieldMetaData("totalElements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_PAGES, new org.apache.thrift.meta_data.FieldMetaData("totalPages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER_OF_ELEMENTS, new org.apache.thrift.meta_data.FieldMetaData("numberOfElements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Page.class, metaDataMap);
  }

  public Page() {
  }

  public Page(
    java.util.List<Stream> content,
    boolean last,
    int totalElements,
    int totalPages,
    int numberOfElements,
    boolean first,
    int size,
    int number)
  {
    this();
    this.content = content;
    this.last = last;
    setLastIsSet(true);
    this.totalElements = totalElements;
    setTotalElementsIsSet(true);
    this.totalPages = totalPages;
    setTotalPagesIsSet(true);
    this.numberOfElements = numberOfElements;
    setNumberOfElementsIsSet(true);
    this.first = first;
    setFirstIsSet(true);
    this.size = size;
    setSizeIsSet(true);
    this.number = number;
    setNumberIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Page(Page other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetContent()) {
      java.util.List<Stream> __this__content = new java.util.ArrayList<Stream>(other.content.size());
      for (Stream other_element : other.content) {
        __this__content.add(new Stream(other_element));
      }
      this.content = __this__content;
    }
    this.last = other.last;
    this.totalElements = other.totalElements;
    this.totalPages = other.totalPages;
    this.numberOfElements = other.numberOfElements;
    this.first = other.first;
    this.size = other.size;
    this.number = other.number;
  }

  public Page deepCopy() {
    return new Page(this);
  }

  @Override
  public void clear() {
    this.content = null;
    setLastIsSet(false);
    this.last = false;
    setTotalElementsIsSet(false);
    this.totalElements = 0;
    setTotalPagesIsSet(false);
    this.totalPages = 0;
    setNumberOfElementsIsSet(false);
    this.numberOfElements = 0;
    setFirstIsSet(false);
    this.first = false;
    setSizeIsSet(false);
    this.size = 0;
    setNumberIsSet(false);
    this.number = 0;
  }

  public int getContentSize() {
    return (this.content == null) ? 0 : this.content.size();
  }

  public java.util.Iterator<Stream> getContentIterator() {
    return (this.content == null) ? null : this.content.iterator();
  }

  public void addToContent(Stream elem) {
    if (this.content == null) {
      this.content = new java.util.ArrayList<Stream>();
    }
    this.content.add(elem);
  }

  public java.util.List<Stream> getContent() {
    return this.content;
  }

  public Page setContent(java.util.List<Stream> content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public boolean isLast() {
    return this.last;
  }

  public Page setLast(boolean last) {
    this.last = last;
    setLastIsSet(true);
    return this;
  }

  public void unsetLast() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_ISSET_ID);
  }

  /** Returns true if field last is set (has been assigned a value) and false otherwise */
  public boolean isSetLast() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_ISSET_ID);
  }

  public void setLastIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_ISSET_ID, value);
  }

  public int getTotalElements() {
    return this.totalElements;
  }

  public Page setTotalElements(int totalElements) {
    this.totalElements = totalElements;
    setTotalElementsIsSet(true);
    return this;
  }

  public void unsetTotalElements() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALELEMENTS_ISSET_ID);
  }

  /** Returns true if field totalElements is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalElements() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALELEMENTS_ISSET_ID);
  }

  public void setTotalElementsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALELEMENTS_ISSET_ID, value);
  }

  public int getTotalPages() {
    return this.totalPages;
  }

  public Page setTotalPages(int totalPages) {
    this.totalPages = totalPages;
    setTotalPagesIsSet(true);
    return this;
  }

  public void unsetTotalPages() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALPAGES_ISSET_ID);
  }

  /** Returns true if field totalPages is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPages() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALPAGES_ISSET_ID);
  }

  public void setTotalPagesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALPAGES_ISSET_ID, value);
  }

  public int getNumberOfElements() {
    return this.numberOfElements;
  }

  public Page setNumberOfElements(int numberOfElements) {
    this.numberOfElements = numberOfElements;
    setNumberOfElementsIsSet(true);
    return this;
  }

  public void unsetNumberOfElements() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFELEMENTS_ISSET_ID);
  }

  /** Returns true if field numberOfElements is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfElements() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBEROFELEMENTS_ISSET_ID);
  }

  public void setNumberOfElementsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBEROFELEMENTS_ISSET_ID, value);
  }

  public boolean isFirst() {
    return this.first;
  }

  public Page setFirst(boolean first) {
    this.first = first;
    setFirstIsSet(true);
    return this;
  }

  public void unsetFirst() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRST_ISSET_ID);
  }

  /** Returns true if field first is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRST_ISSET_ID);
  }

  public void setFirstIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRST_ISSET_ID, value);
  }

  public int getSize() {
    return this.size;
  }

  public Page setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public int getNumber() {
    return this.number;
  }

  public Page setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
    return this;
  }

  public void unsetNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((java.util.List<Stream>)value);
      }
      break;

    case LAST:
      if (value == null) {
        unsetLast();
      } else {
        setLast((java.lang.Boolean)value);
      }
      break;

    case TOTAL_ELEMENTS:
      if (value == null) {
        unsetTotalElements();
      } else {
        setTotalElements((java.lang.Integer)value);
      }
      break;

    case TOTAL_PAGES:
      if (value == null) {
        unsetTotalPages();
      } else {
        setTotalPages((java.lang.Integer)value);
      }
      break;

    case NUMBER_OF_ELEMENTS:
      if (value == null) {
        unsetNumberOfElements();
      } else {
        setNumberOfElements((java.lang.Integer)value);
      }
      break;

    case FIRST:
      if (value == null) {
        unsetFirst();
      } else {
        setFirst((java.lang.Boolean)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((java.lang.Integer)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTENT:
      return getContent();

    case LAST:
      return isLast();

    case TOTAL_ELEMENTS:
      return getTotalElements();

    case TOTAL_PAGES:
      return getTotalPages();

    case NUMBER_OF_ELEMENTS:
      return getNumberOfElements();

    case FIRST:
      return isFirst();

    case SIZE:
      return getSize();

    case NUMBER:
      return getNumber();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CONTENT:
      return isSetContent();
    case LAST:
      return isSetLast();
    case TOTAL_ELEMENTS:
      return isSetTotalElements();
    case TOTAL_PAGES:
      return isSetTotalPages();
    case NUMBER_OF_ELEMENTS:
      return isSetNumberOfElements();
    case FIRST:
      return isSetFirst();
    case SIZE:
      return isSetSize();
    case NUMBER:
      return isSetNumber();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Page)
      return this.equals((Page)that);
    return false;
  }

  public boolean equals(Page that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_last = true;
    boolean that_present_last = true;
    if (this_present_last || that_present_last) {
      if (!(this_present_last && that_present_last))
        return false;
      if (this.last != that.last)
        return false;
    }

    boolean this_present_totalElements = true;
    boolean that_present_totalElements = true;
    if (this_present_totalElements || that_present_totalElements) {
      if (!(this_present_totalElements && that_present_totalElements))
        return false;
      if (this.totalElements != that.totalElements)
        return false;
    }

    boolean this_present_totalPages = true;
    boolean that_present_totalPages = true;
    if (this_present_totalPages || that_present_totalPages) {
      if (!(this_present_totalPages && that_present_totalPages))
        return false;
      if (this.totalPages != that.totalPages)
        return false;
    }

    boolean this_present_numberOfElements = true;
    boolean that_present_numberOfElements = true;
    if (this_present_numberOfElements || that_present_numberOfElements) {
      if (!(this_present_numberOfElements && that_present_numberOfElements))
        return false;
      if (this.numberOfElements != that.numberOfElements)
        return false;
    }

    boolean this_present_first = true;
    boolean that_present_first = true;
    if (this_present_first || that_present_first) {
      if (!(this_present_first && that_present_first))
        return false;
      if (this.first != that.first)
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((last) ? 131071 : 524287);

    hashCode = hashCode * 8191 + totalElements;

    hashCode = hashCode * 8191 + totalPages;

    hashCode = hashCode * 8191 + numberOfElements;

    hashCode = hashCode * 8191 + ((first) ? 131071 : 524287);

    hashCode = hashCode * 8191 + size;

    hashCode = hashCode * 8191 + number;

    return hashCode;
  }

  @Override
  public int compareTo(Page other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLast()).compareTo(other.isSetLast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last, other.last);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalElements()).compareTo(other.isSetTotalElements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalElements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalElements, other.totalElements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalPages()).compareTo(other.isSetTotalPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPages, other.totalPages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumberOfElements()).compareTo(other.isSetNumberOfElements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfElements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfElements, other.numberOfElements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFirst()).compareTo(other.isSetFirst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Page(");
    boolean first = true;

    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("last:");
    sb.append(this.last);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalElements:");
    sb.append(this.totalElements);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPages:");
    sb.append(this.totalPages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfElements:");
    sb.append(this.numberOfElements);
    first = false;
    if (!first) sb.append(", ");
    sb.append("first:");
    sb.append(this.first);
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    sb.append(this.number);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PageStandardScheme getScheme() {
      return new PageStandardScheme();
    }
  }

  private static class PageStandardScheme extends org.apache.thrift.scheme.StandardScheme<Page> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Page struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.content = new java.util.ArrayList<Stream>(_list0.size);
                Stream _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Stream();
                  _elem1.read(iprot);
                  struct.content.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.last = iprot.readBool();
              struct.setLastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_ELEMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalElements = iprot.readI32();
              struct.setTotalElementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPages = iprot.readI32();
              struct.setTotalPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUMBER_OF_ELEMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfElements = iprot.readI32();
              struct.setNumberOfElementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.first = iprot.readBool();
              struct.setFirstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.size = iprot.readI32();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Page struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.content.size()));
          for (Stream _iter3 : struct.content)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_FIELD_DESC);
      oprot.writeBool(struct.last);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_ELEMENTS_FIELD_DESC);
      oprot.writeI32(struct.totalElements);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PAGES_FIELD_DESC);
      oprot.writeI32(struct.totalPages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_OF_ELEMENTS_FIELD_DESC);
      oprot.writeI32(struct.numberOfElements);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_FIELD_DESC);
      oprot.writeBool(struct.first);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(struct.size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_FIELD_DESC);
      oprot.writeI32(struct.number);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PageTupleScheme getScheme() {
      return new PageTupleScheme();
    }
  }

  private static class PageTupleScheme extends org.apache.thrift.scheme.TupleScheme<Page> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Page struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetContent()) {
        optionals.set(0);
      }
      if (struct.isSetLast()) {
        optionals.set(1);
      }
      if (struct.isSetTotalElements()) {
        optionals.set(2);
      }
      if (struct.isSetTotalPages()) {
        optionals.set(3);
      }
      if (struct.isSetNumberOfElements()) {
        optionals.set(4);
      }
      if (struct.isSetFirst()) {
        optionals.set(5);
      }
      if (struct.isSetSize()) {
        optionals.set(6);
      }
      if (struct.isSetNumber()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetContent()) {
        {
          oprot.writeI32(struct.content.size());
          for (Stream _iter4 : struct.content)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetLast()) {
        oprot.writeBool(struct.last);
      }
      if (struct.isSetTotalElements()) {
        oprot.writeI32(struct.totalElements);
      }
      if (struct.isSetTotalPages()) {
        oprot.writeI32(struct.totalPages);
      }
      if (struct.isSetNumberOfElements()) {
        oprot.writeI32(struct.numberOfElements);
      }
      if (struct.isSetFirst()) {
        oprot.writeBool(struct.first);
      }
      if (struct.isSetSize()) {
        oprot.writeI32(struct.size);
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Page struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.content = new java.util.ArrayList<Stream>(_list5.size);
          Stream _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new Stream();
            _elem6.read(iprot);
            struct.content.add(_elem6);
          }
        }
        struct.setContentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.last = iprot.readBool();
        struct.setLastIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalElements = iprot.readI32();
        struct.setTotalElementsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalPages = iprot.readI32();
        struct.setTotalPagesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.numberOfElements = iprot.readI32();
        struct.setNumberOfElementsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.first = iprot.readBool();
        struct.setFirstIsSet(true);
      }
      if (incoming.get(6)) {
        struct.size = iprot.readI32();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

